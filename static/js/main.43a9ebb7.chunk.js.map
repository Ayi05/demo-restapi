{"version":3,"sources":["home/1_header/navbar.js","home/2_main/sections/users.js","home/2_main/sections/conversion.js","home/2_main/display.js","Home.js","serviceWorker.js","index.js"],"names":["Navbar","props","class","href","src","alt","style","width","Users","useState","users","setUsers","useEffect","fetch","then","res","json","data","className","map","user","name","company","email","address","city","useStyles","makeStyles","theme","root","margin","spacing","Conversion","classes","React","currencyIn","setCurrencyIn","currencyOut","setCurrencyOut","amountIn","setAmountIn","amountOut","setAmountOut","currenciesName","setCurrenciesName","base","Object","keys","rates","currenciesRates","setCurrenciesRates","values","autoComplete","onSubmit","event","amount","toFixed","replace","select","size","label","onChange","indexOf","target","value","helperText","variant","option","MenuItem","key","type","validators","errorMessages","InputProps","readOnly","Button","color","TabPanel","children","index","other","Typography","component","role","hidden","id","aria-labelledby","Box","p","a11yProps","LinkTab","Tab","onClick","preventDefault","flexGrow","backgroundColor","palette","background","paper","Display","setValue","AppBar","position","Tabs","newValue","aria-label","Home","fontFamily","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAwBeA,G,MAtBA,SAAAC,GACb,OAEE,yBAAKC,MAAM,4FAET,yBAAKA,MAAM,aACT,uBAAGA,MAAM,eAAeC,KAAK,yBAC3B,yBAAKC,IAAI,aAAaC,IAAI,OAAOC,MAAO,CAAEC,MAAO,UACjD,wBAAIL,MAAM,YAAW,2BAAOA,MAAM,sCAAb,YAGvB,yBAAKA,MAAM,8BACT,wBAAIA,MAAM,YAAW,2BAAOA,MAAM,gDAAb,sB,qECgDhBM,EA3DD,WAAO,IAAD,EAEUC,mBAAS,IAFnB,mBAETC,EAFS,KAEFC,EAFE,KAUhB,OANAC,qBAAU,WACNC,MAAM,+CACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIN,EAASM,SAK3B,oCAEI,yBAAKC,UAAU,oBACX,2BAAOA,UAAU,8BACb,2BAAOA,UAAU,YACb,4BACI,oCACA,yCAGR,+BACKR,EAAMS,KAAI,SAAAC,GAAI,OACX,wBAAIF,UAAU,IACV,4BAAI,+BAAQE,EAAKC,OACjB,4BAAI,+BAAQD,EAAKE,QAAQD,cAQ7C,yBAAKH,UAAU,4BACX,2BAAOA,UAAU,8BACb,2BAAOA,UAAU,YACb,4BACI,oCACA,sCACA,oCACA,yCAGR,+BACKR,EAAMS,KAAI,SAAAC,GAAI,OACX,wBAAIF,UAAU,IACV,4BAAI,+BAAQE,EAAKC,OACjB,4BAAI,+BAAQD,EAAKG,QACjB,4BAAI,+BAAQH,EAAKI,QAAQC,OACzB,4BAAI,+BAAQL,EAAKE,QAAQD,gB,kCC9CnDK,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACF,uBAAwB,CACpBC,OAAQF,EAAMG,QAAQ,GACtBxB,MAAO,UAOJ,SAASyB,IACpB,IAAMC,EAAUP,IADiB,EAEGQ,IAAMzB,SAAS,KAFlB,mBAE1B0B,EAF0B,KAEdC,EAFc,OAGKF,IAAMzB,SAAS,KAHpB,mBAG1B4B,EAH0B,KAGbC,EAHa,OAIDJ,IAAMzB,WAJL,mBAI1B8B,EAJ0B,KAIhBC,EAJgB,OAKCN,IAAMzB,WALP,mBAK1BgC,EAL0B,KAKfC,EALe,OAkCWR,IAAMzB,SAAS,IAlC1B,mBAkC1BkC,EAlC0B,KAkCVC,EAlCU,KAmCjCV,IAAMtB,WAAU,WACZC,MAAM,mCACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAI2B,EAAkB,CAAC3B,EAAK4B,MAAP,mBAAgBC,OAAOC,KAAK9B,EAAK+B,eACrE,IAvC8B,MA0Cad,IAAMzB,SAAS,IA1C5B,mBA0C1BwC,EA1C0B,KA0CTC,EA1CS,KAkDjC,OAPAhB,IAAMtB,WAAU,WACZC,MAAM,mCACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIiC,EAAmB,CAAC,GAAF,mBAAQJ,OAAOK,OAAOlC,EAAK+B,eAChE,IAIC,yBAAK9B,UAAU,iCAEX,yBAAKA,UAAU,mCACX,kBAAC,gBAAD,CAAeA,UAAWe,EAAQJ,KAAMuB,aAAa,KAAKC,SA7BjD,SAAAC,GACjB,GAAIf,GAAY,EAAG,CACf,IAAIgB,EAAUhB,GAAYF,EAAcF,GACxCoB,EAASA,EAAOC,QAAQ,GAAGC,QAAQ,0BAA2B,OAC9Df,EAAaa,MA2BL,yBAAKrC,UAAU,oBACX,yBAAKA,UAAU,sBACX,kBAAC,kBAAD,CACIwC,QAAM,EACNC,KAAK,QACLC,MAAM,KACNC,SAtDH,SAAAP,GAErBlB,EAAca,EAAgBN,EAAemB,QAAQR,EAAMS,OAAOC,SAClEtB,EAAa,KAoDWuB,WAAW,GACXC,QAAQ,YAEPvB,EAAexB,KAAI,SAAAgD,GAAM,OACtB,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAQH,MAAOG,GACzBA,OAMb,kBAAC,gBAAD,CACIR,KAAK,QACLW,KAAK,SACLV,MAAM,UACNI,MAAOzB,EACPsB,SA3DL,SAAAP,GACnBd,EAAYc,EAAMS,OAAOC,OACzBtB,EAAa,KA0DWwB,QAAQ,WACRK,WAAY,CAAC,WAAY,cAAe,8BAA+BC,cAAe,CAAC,0BAKnG,yBAAKtD,UAAU,oBACX,yBAAKA,UAAU,sBACX,kBAAC,kBAAD,CACIwC,QAAM,EACNC,KAAK,QACLC,MAAM,OACNC,SA9EF,SAAAP,GAEtBhB,EAAeW,EAAgBN,EAAemB,QAAQR,EAAMS,OAAOC,SACnEtB,EAAa,KA4EWuB,WAAW,GACXC,QAAQ,YAEPvB,EAAexB,KAAI,SAAAgD,GAAM,OACtB,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAQH,MAAOG,GACzBA,OAKb,kBAAC,gBAAD,CACIR,KAAK,QACLK,MAAOvB,EACPyB,QAAQ,WACRD,WAAW,GACXQ,WAAY,CAAEC,UAAU,OAKpC,yBAAKxD,UAAU,eACX,kBAACyD,EAAA,EAAD,CAAQT,QAAQ,YAAYU,MAAM,UAAUN,KAAK,UAAS,uBAAGpD,UAAU,kCCvH/F,SAAS2D,EAAS5E,GAAQ,IACd6E,EAAqC7E,EAArC6E,SAAUd,EAA2B/D,EAA3B+D,MAAOe,EAAoB9E,EAApB8E,MAAUC,EADd,YACwB/E,EADxB,8BAGrB,OACI,kBAACgF,EAAA,EAAD,eACIC,UAAU,MACVC,KAAK,WACLC,OAAQpB,IAAUe,EAClBM,GAAE,uBAAkBN,GACpBO,kBAAA,kBAA4BP,IACxBC,GAEHhB,IAAUe,GAAS,kBAACQ,EAAA,EAAD,CAAKC,EAAG,GAAIV,IAW5C,SAASW,EAAUV,GACf,MAAO,CACHM,GAAG,WAAD,OAAaN,GACf,gBAAgB,gBAAhB,OAAiCA,IAIzC,SAASW,EAAQzF,GACb,OACI,kBAAC0F,EAAA,EAAD,eACIT,UAAU,IACVU,QAAS,SAAAtC,GACLA,EAAMuC,mBAEN5F,IAKhB,IAAMyB,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFiE,SAAU,EACVC,gBAAiBnE,EAAMoE,QAAQC,WAAWC,WAInC,SAASC,IACpB,IAAMlE,EAAUP,IADc,EAEJQ,IAAMzB,SAAS,GAFX,mBAEvBuD,EAFuB,KAEhBoC,EAFgB,KAQ9B,OACI,yBAAKlF,UAAWe,EAAQJ,MACpB,kBAACwE,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,CACIrC,QAAQ,YACRF,MAAOA,EACPH,SAVK,SAACP,EAAOkD,GACzBJ,EAASI,IAUGC,aAAW,oBAEX,kBAACf,EAAD,eAAS9B,MAAM,cAAiB6B,EAAU,KAC1C,kBAACC,EAAD,eAAS9B,MAAM,SAAY6B,EAAU,OAK7C,kBAACZ,EAAD,CAAUb,MAAOA,EAAOe,MAAO,GAC3B,kBAAC/C,EAAD,OAGJ,kBAAC6C,EAAD,CAAUb,MAAOA,EAAOe,MAAO,GAC3B,kBAAC,EAAD,QCtFhB,IAWe2B,EAXF,SAACzG,GACZ,OACE,yBAAKK,MAAO,CAAEqG,WAAY,YACxB,kBAAC,EAAD,MACA,yBAAKzF,UAAU,kBACb,kBAACiF,EAAD,SCGYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzG,MAAK,SAAA0G,GACjCA,EAAaC,kB","file":"static/js/main.43a9ebb7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Navbar = props => {\r\n  return (\r\n\r\n    <nav class=\"container navbar navbar-expand-lg navbar-light sticky-top shadow p-2 bg-light wow fadeIn\">\r\n\r\n      <div class=\"container\">\r\n        <a class=\"navbar-brand\" href=\"https://ajavonweb.ca/\">\r\n          <img src=\"./icon.png\" alt=\"logo\" style={{ width: \"30px\" }} />\r\n          <h2 class=\"d-inline\"><small class=\"text-sm-left font-weight-bold mx-1\">AJ-Web</small></h2>\r\n        </a>\r\n\r\n        <div class=\"d-flex justify-content-end\">\r\n          <h3 class=\"d-inline\"><small class=\"text-sm-left text-info font-weight-bold mx-1\">Demo-RestApi</small></h3>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </nav>\r\n\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\n\r\nconst Users = () => {\r\n\r\n    const [users, setUsers] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetch('https://jsonplaceholder.typicode.com/users/')\r\n            .then(res => res.json())\r\n            .then(data => setUsers(data))\r\n    });\r\n\r\n    return (\r\n\r\n        <>\r\n            {/* Visible only on xs and sm screen  */}\r\n            <div className=\"border d-md-none\">\r\n                <table className=\"table table-md table-hover\">\r\n                    <thead className=\"bg-light\">\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Company</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {users.map(user => (\r\n                            <tr className=\"\">\r\n                                <td><small>{user.name}</small></td>\r\n                                <td><small>{user.company.name}</small></td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n            {/* Visible only on md screen and above */}\r\n            <div className=\"border d-none d-md-block\">\r\n                <table className=\"table table-md table-hover\">\r\n                    <thead className=\"bg-light\">\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>E-Mail</th>\r\n                            <th>City</th>\r\n                            <th>Company</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {users.map(user => (\r\n                            <tr className=\"\">\r\n                                <td><small>{user.name}</small></td>\r\n                                <td><small>{user.email}</small></td>\r\n                                <td><small>{user.address.city}</small></td>\r\n                                <td><small>{user.company.name}</small></td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\nexport default Users;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { Button } from '@material-ui/core';\r\nimport { ValidatorForm, TextValidator, SelectValidator } from 'react-material-ui-form-validator';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: 160,\r\n        },\r\n    },\r\n}));\r\n\r\n\r\n\r\nexport default function Conversion() {\r\n    const classes = useStyles();\r\n    const [currencyIn, setCurrencyIn] = React.useState(\"1\");\r\n    const [currencyOut, setCurrencyOut] = React.useState(\"1\");\r\n    const [amountIn, setAmountIn] = React.useState();\r\n    const [amountOut, setAmountOut] = React.useState();\r\n\r\n\r\n    const handleCurrencyIn = event => {\r\n        // let i = currenciesName.indexOf(event.target.value);\r\n        setCurrencyIn(currenciesRates[currenciesName.indexOf(event.target.value)]);\r\n        setAmountOut('');\r\n    };\r\n\r\n    const handleCurrencyOut = event => {\r\n        // let o = currenciesName.indexOf(event.target.value);\r\n        setCurrencyOut(currenciesRates[currenciesName.indexOf(event.target.value)]);\r\n        setAmountOut('');\r\n    };\r\n\r\n    const handleAmountIn = event => {\r\n        setAmountIn(event.target.value);\r\n        setAmountOut('');\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n        if (amountIn >= 0) {\r\n            let amount = (amountIn * (currencyOut / currencyIn));\r\n            amount = amount.toFixed(3).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 ');\r\n            setAmountOut(amount);\r\n        }\r\n    };\r\n\r\n\r\n    const [currenciesName, setCurrenciesName] = React.useState([]);\r\n    React.useEffect(() => {\r\n        fetch('https://api.openrates.io/latest')\r\n            .then(res => res.json())\r\n            .then(data => setCurrenciesName([data.base, ...Object.keys(data.rates)]))\r\n    }, []);\r\n\r\n\r\n    const [currenciesRates, setCurrenciesRates] = React.useState([]);\r\n    React.useEffect(() => {\r\n        fetch('https://api.openrates.io/latest')\r\n            .then(res => res.json())\r\n            .then(data => setCurrenciesRates([1, ...Object.values(data.rates)]))\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div className=\"d-flex justify-content-center\">\r\n\r\n            <div className=\"border border-info rounded pb-3\">\r\n                <ValidatorForm className={classes.root} autoComplete=\"on\" onSubmit={handleSubmit}>\r\n\r\n                    <div className=\"form-inline my-3\">\r\n                        <div className=\"input-group-append\">\r\n                            <SelectValidator\r\n                                select\r\n                                size=\"small\"\r\n                                label=\"De\"\r\n                                onChange={handleCurrencyIn}\r\n                                helperText=\"\"\r\n                                variant=\"outlined\">\r\n\r\n                                {currenciesName.map(option => (\r\n                                    <MenuItem key={option} value={option}>\r\n                                        {option}\r\n                                    </MenuItem>\r\n                                ))}\r\n\r\n                            </SelectValidator>\r\n\r\n                            <TextValidator\r\n                                size=\"small\"\r\n                                type=\"number\"\r\n                                label=\"Montant\"\r\n                                value={amountIn}\r\n                                onChange={handleAmountIn}\r\n                                variant=\"outlined\"\r\n                                validators={['required', 'minNumber:0', 'maxNumber:9999999999999999']} errorMessages={['Champ Obligatoire!']}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-inline my-3\">\r\n                        <div className=\"input-group-append\">\r\n                            <SelectValidator\r\n                                select\r\n                                size=\"small\"\r\n                                label=\"À\"\r\n                                onChange={handleCurrencyOut}\r\n                                helperText=\"\"\r\n                                variant=\"outlined\"\r\n                            >\r\n                                {currenciesName.map(option => (\r\n                                    <MenuItem key={option} value={option}>\r\n                                        {option}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </SelectValidator>\r\n\r\n                            <TextValidator\r\n                                size=\"small\"\r\n                                value={amountOut}\r\n                                variant=\"outlined\"\r\n                                helperText=\"\"\r\n                                InputProps={{ readOnly: true, }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"text-center\">\r\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\"><i className=\"fa fa-angle-double-right\"></i></Button>\r\n                    </div>\r\n                </ValidatorForm>\r\n            </div>\r\n        </div >\r\n    );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport Users from './sections/users'\r\n// import Products from './sections/products'\r\nimport Conversion from './sections/conversion'\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <Typography\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`nav-tabpanel-${index}`}\r\n            aria-labelledby={`nav-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && <Box p={3}>{children}</Box>}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `nav-tab-${index}`,\r\n        'aria-controls': `nav-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nfunction LinkTab(props) {\r\n    return (\r\n        <Tab\r\n            component=\"a\"\r\n            onClick={event => {\r\n                event.preventDefault();\r\n            }}\r\n            {...props}\r\n        />\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nexport default function Display() {\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Tabs\r\n                    variant=\"fullWidth\"\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    aria-label=\"nav tabs example\"\r\n                >\r\n                    <LinkTab label=\"Conversion\" {...a11yProps(0)} />\r\n                    <LinkTab label=\"Users\" {...a11yProps(1)} />\r\n                    {/* <LinkTab label=\"Products\" {...a11yProps(2)} /> */}\r\n                </Tabs>\r\n            </AppBar>\r\n\r\n            <TabPanel value={value} index={0}>\r\n                <Conversion></Conversion>\r\n            </TabPanel>\r\n\r\n            <TabPanel value={value} index={1}>\r\n                <Users></Users>\r\n            </TabPanel>\r\n\r\n            {/* <TabPanel value={value} index={2}>\r\n                <Products></Products>\r\n            </TabPanel> */}\r\n\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\nimport Navbar from './home/1_header/navbar';\nimport Display from './home/2_main/display';\n\nconst Home = (props) => {\n  return (\n    <div style={{ fontFamily: \"Cambria\" }}>\n      <Navbar></Navbar>\n      <div className=\"container mt-5\">\n        <Display></Display>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Home from \"./Home\";\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Home />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}